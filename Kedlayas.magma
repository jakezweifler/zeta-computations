
p := 5;  // Prime p
N1 := 5;
N := 3;  // Should actually be <= N_1 + log_p(2N_1)

Zp := pAdicField(p, N1); // The p-adic ring Z/p^N
ZpX<x> := PolynomialRing(Zp);

Q := x^3 + x + 1;  // Example polynomial Q(x) = 3x^2 - 2x + 1
Q_prime := Derivative(Q);
g := 1;

//here t = y^{-1}
R<t> := PowerSeriesRing(ZpX, 2 * N * p); 



// Function to convert a polynomial with rational coefficients to Z/p^n[x]
function ConvertToPAdicField(poly, p, N1)
    Zpn := pAdicField(p, N1);  
    ZpnX<x> := PolynomialRing(Zpn);  

    // Convert each coefficient to Z/p^n by clearing denominators
    coefficients := [Zpn!(Numerator(c) * Denominator(c)^(-1)) : c in Coefficients(poly)];
    return ZpnX!coefficients;
end function;


// input: polynomial in Z[x]; output: U, V in Zp[x] such that UQ + VQ' = 1
function getPadicBezouts(poly, p, N1)
    Qx<x> := PolynomialRing(Rationals());

    Q_rat := Qx!poly;
    Q_rat_prime := Derivative(Q_rat); 

    gcd, U0, V0 := XGCD(Q_rat, Q_rat_prime);

    U := ConvertToPAdicField(U0, p, N1);
    V := ConvertToPAdicField(V0, p, N1);

    return U, V;
end function;


U, V := getPadicBezouts(Q, p, N1);





//computes (1 + ...)^{-1/2}
function ApproxInvSqr(Q, p, N1, N)
    // Step 2: Reduce Q(x) mod p^N to get Q0(x)
    // Q0 := Polynomial(Zp, [Zp!c : c in Coefficients(Q)]);
    Q0 := ZpX!Q;
    
    // Step 3: Define the power series s = 1 + (Q0(x^p) - Q0(x)^p) * t^p
    Q_p := Evaluate(Q0, x^p);  // Q0(x^p)
    Q_pow := Q0^p;  // Q0(x)^p
    s := 1 + (Q_p - Q_pow) * t^(2*p);
    inv_2 := R!Zp!1 / Zp!2;

    // Step 4: Use Newton iteration to compute s^(-1/2)
    // Start with the initial guess x_0 = 1
    x0 := R!1;
    for i := 1 to N do
        // Newton iteration: x_{i+1} = (3/2) * x_i - (1/2) * s * x_i^3 mod t^(2^i + 1)
        x0 := (3 * inv_2 * x0 -  inv_2 * s * x0^3);
    end for;

    return x0;  // Return the list of polynomials A_i(x)
end function;


FrobYinv := t^p * ApproxInvSqr(Q, p, N1, N);

// print(FrobYinv);


//Note that S and Q might be different polynomial types, but magma converts Q to the right type anyway
//TODO: convert Q once and for all at the very beginning
function factorOutPowers(S, Q)
   // Base case: 
    if Degree(S) lt Degree(Q) then
        return [S]; 
    end if;

    Q0, F0 := Quotrem(S, Q);

    // Recursively decompose the quotient
    Fs := factorOutPowers(Q0, Q);

    Fs := [F0] cat Fs;

    return Fs;  // Return the list of F_i terms
end function;

// SS := 5 * x^9;

// QQ := ZpX!Q;

// LL := factorOutPowers(SS,QQ);

// y0 := ZpX!0;

// for i := 1 to 4 do
//     y0 +:= LL[i] * QQ^(i-1);    
// end for;

// print y0;
// print SS;
// print factorOutPowers(SS,QQ);



//coef should always be odd here
function reducePows(S, coef)
    if S eq Parent(S)!0 then
        return S;
    end if;

    if (coef mod 2) eq 0 then
        print "SOMETHING SEEMS WRONG";
    end if;   

    //This gives S = Fs[1]*Q^0 + Fs[2]*Q^1 + Fs[3]*Q^2 + ...
    //So Q^(i-1) = t^{-2(i-1)}
    Fs := factorOutPowers(S, Q);
    // print(Fs);

    result := ZpX!0;  // Initialize the result as 0

    //here we replace Q^i with y^{2i} as much as possible so that there are still no y's in the numerator
    for i in [1..#Fs] do
        if (coef - 2*(i-1)) lt 0 then 
            // print S;
            // print coef;
            // print Fs;
            // print "FAIL";
            Qpow := (i-1) - ((coef - 1) div 2);
            result +:= Fs[i] * Q^Qpow * t;  // Q^(i-1) * t^(coef - 1) * t = Q^? * t so ? = 
        else
            result +:= Fs[i] * t^(coef - 2*(i-1));  // replace
        end if;     
    end for;

    return result;
end function;




function getBasisRedA(i)
    // print(FrobYinv);
    b := p * x^(p*i + p - 1) * FrobYinv;
    // print b;

    result := R!0;

    for i in [0..(p*N - 1)] do
        A := Coefficient(b, i);
        // print A;
        // print i;
        // print "";
        result +:= reducePows(A,i);
    end for;    

    coeffs := [Coefficient(result, 2*i+1) : i in [0..Degree(result) div 2]];
    // print result;
    // print result;
    return coeffs;
end function;


print getBasisRedA(0);

print getBasisRedA(1);

// function RedA(f)


// Function to divide a polynomial f in ZpX by an integer a, if possible
function PolynomialDivide(f, a)
    Zp := BaseRing(Parent(f));  // Get the p-adic ring Zp
    ZpX<x> := Parent(f);  // Polynomial ring ZpX
    p := Characteristic(Zp);  // Prime p for Zp

    // Check if the divisor is invertible in Zp or if f is divisible by a
    if IsInvertible(Zp!a) then
        a_inv := Zp!1 / Zp!a;  // Compute the inverse of a in Zp
        return (a_inv * f);  // Return the divided polynomial
    elif &and[IsDivisibleBy(c, a) : c in Coefficients(f)] then
        // Divide each coefficient by a if all are divisible by a
        return ZpX![(Zp!(c div a)) : c in Coefficients(f)];
    else
        error "Error: Polynomial is not divisible by", a;
    end if;
end function;


//Fs = [G,F1,F2,...,Fk] where the element equals Gy^{-1} + F1y^{-3} + ... + Fky^{-(2k+1)} + ...
function reduceFs(Fs)
    //set S_{2pN} = F_{2pN}

    Fs[1] := 0;
    Len := #Fs;
    Sk := Fs[Len];

    for i in [Len - 1..1 by -1] do
        Ak := U * Sk;
        Bk := V * Sk;
        Fk := Fs[i]; //Fs[i] = F_(i-1) and Fs[1] = 0

        Bk_prime := Derivative(Bk);

        Sk := Fk + Ak + PolynomialDivide(2 * Bk_prime, 2*i-1);
    end for;
    
    return Sk;
end function;


function reduceG(G)
    j := Degree(G) - 2*g + 1;
    Gj := G;
    for i in [j - 1..1 by -1] do
        R := x^i * Q_prime + 2 * i * x^(i-1) * Q;
        _, rem := Quotrem(Gj, R);
        Gj := rem;
    end for;



    return Gj;
end function;

function getBasisRedB(i)
    Fs := getBasisRedA(i);

    S0 := reduceFs(Fs);
    G0 := reduceG(Fs[1]);

 

    return (G0 + S0);
end function;

print "FINAL OUTPUT:";

print(getBasisRedB(0));
print(getBasisRedB(1));

// Define the polynomial x^2 + 1 in ZpX
// P := x^2 + 1;

// Print the polynomial
// print P;
