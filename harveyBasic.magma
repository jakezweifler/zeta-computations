


//converts f in Q[t] to f in Zp[x], assuming all coefs exist.
function ratToPadic(f, p, N)
    Zp := pAdicRing(p, N); 
    ZpX<x> := PolynomialRing(Zp);
    coeffs := Coefficients(f);
    padic_coeffs := [Zp!c : c in coeffs];  // Convert each coefficient to p-adic
    f_padic := &+[padic_coeffs[i] * x^(i-1) : i in [1..#padic_coeffs]];
    
    return f_padic;
end function;


//given integer poly Q, gets U,V in pAdicRing(p, N) such that UQ + VQ_prime = 1
function getUV(p, Q, N)
    R<t> := PolynomialRing(RationalField());
    Q_rat := R!Q;
    Q_rat_prime := Derivative(Q_rat);

    _, U0, V0 := XGCD(Q_rat, Q_rat_prime);    

    // print(U0);
    // print(V0);

    // print(U0 * (t^3 + t + 1) + V0 * Derivative(Q));


    U := ratToPadic(U0, p, N);
    V := ratToPadic(V0, p, N);

    return U,V;
end function;


//inputs satisfy UQ + VQ_prime = 1, in other words, U = Q^{-1} mod Q_prime, etc...
function getRS(Q, Q_prime, U, V, i)
    ZpX<x> := Parent(Q);  

    //this is just Q^{-1} * x^i
    R0 := x^i * U;
    //which we then take mod Q_prime
    _, R1 := Quotrem(R0, Q_prime);

    E := x^i - R1 * Q;

    S1, _ := Quotrem(E, Q_prime);


    // A := R0 * Q + S0 * Q_prime;
    // B := R1 * Q + S1 * Q_prime;

    // print(R1);
    // print(S1);


    return R1, S1;

end function;




Z<u> := PolynomialRing(Integers());
Q_int := u^7 + 2*u + 2;  // Example polynomial Q(x) = 3x^2 - 2x + 1
P_int := 2*u + 2;
g := 3;

p := 101;  // Prime p
N := 5;
Zp := pAdicField(p, N); 
ZpX<x> := PolynomialRing(Zp);

Q := ZpX!Q_int;
P := ZpX!P_int;
Q_prime := Derivative(Q);
P_prime := Derivative(P);

U,V := getUV(p, Q_int, N);



binom_half := [Rationals() | 1]; 
for k in [1..N] do
    term := (-1 / 2 - (k - 1)) * binom_half[k] / k;
    Append(~binom_half, term);
end for;
// print(binom_half[1]);

C := ZeroMatrix(Zp, N, (2*g+1)*(N-1) + 1);
for j in [1..N] do
    Q_to_j := Q^(j-1);

    for r in [1..(2*g+1)*(N-1) + 1] do 
        C[j, r] := Coefficient(Q_to_j, r - 1);
    end for;
end for;
// print(C);
// print(Q);
// print(Parent(Q^2));

B := ZeroMatrix(Zp, N, (2*g+1)*(N-1) + 1);

for j in [1..N] do

    for r in [1..(2*g+1)*(N-1) + 1] do 
        S := 0;
        
        for k in [j-1..N-1] do 
            toAdd := (-1)^((j-1) + k) * binom_half[k + 1] * Binomial(k, j-1);
            // print(toAdd);
            S +:= toAdd;
        end for;

        // print(S);
        // print(Parent(S));
        B[j, r] := p * C[j,r] * S;
        // print("SET");
        // print("");
        // print(Parent(C[j, r]));
    end for;
end for;
// print(B);

function getB(j,r)
    if r lt 0 then
        return 0;
    else 
        return B[j+1, r+1];
    end if;  
end function;

// print(getB(2,3));


/////////////////////
/// Vertical stuff //
/////////////////////

function getMV(t)
    //in the paper, we use Zp[t] for the matrix, but Im just using x again since I dont want to make another variable
    M := ZeroMatrix(Zp, 2*g, 2*g);

    for i in [0..(2*g)-1] do

        R,S := getRS(Q, Q_prime, U, V, i);

        //A := (2*t-1)*R + 2*Derivative(S);
        //this looks wierd because when t is a variable, its easier this way
        A := 2 * R;
        B := 2*Derivative(S) - R;

        for j in [0..(2*g)-1] do
            M[j + 1, i + 1] := t * Coefficient(A, j) + Coefficient(B, j); 
        end for;
    end for;

    // print(M);

    return M;
end function;

function getDV(t)
    return (2*t-1);
end function;

function getMVrange(t0,t1)
    M := IdentityMatrix(Zp, 2*g);
    
    for i in [(t0+1)..t1] do
        M := M * getMV(i);
    end for;

    return M;
end function;

function getDVrange(t0,t1)
    D := One(Zp);

    for i in [(t0+1)..t1] do
        D := D * getDV(i);
    end for;

    return D;
end function;



///////////////////////
/// Horizontal stuff //
///////////////////////


function getDH(s, t)
    return ((2*g + 1) * (2*t - 1) - 2*s);
end function;

//This will be 2g+1 by 2g+1 unless s is zero in which case, it must be 2g by 2g+1
function getMH(s, t)    
    // ZpXt<t> := PolynomialRing(ZpX);
    // Zpb<b> := PolynomialRing(Zp);   

    D := getDH(s,t);
    F := 2*s*P - (2*t - 1)*x*P_prime;

    if s eq 0 then
        M := ZeroMatrix(Zp, 2*g, 2*g + 1);

        for i in [1..(2*g)] do
            M[i, i] := D;
        end for;

        for i in [1..(2*g)] do
            M[i, 2*g + 1] := Coefficient(F, i);
        end for;
        
    else
        //in the paper, we use Zp[t] for the matrix, but Im just using x again since I dont want to make another variable
        M := ZeroMatrix(Zp, 2*g + 1, 2*g + 1);

        for i in [1..(2*g)] do
            M[i+1, i] := D;
        end for;

        for i in [1..(2*g + 1)] do
            M[i, 2*g + 1] := Coefficient(F, i - 1);
        end for;
    end if;

    return M;
end function;


function getMHrange(s0,s1, t)
    M := IdentityMatrix(Zp, 2*g + 1);
    
    for i in [(s0+1)..s1] do
        M := M * getMH(i, t);
    end for;

    return M;
end function;


function getDHrange(s0,s1, t)
    D := One(Zp);

    for i in [(s0+1)..s1] do
        D := D * getDH(i, t);
    end for;

    return D;
end function;





function getWij(i, j)    

    t := ((2*j + 1)*p - 1)/2;
    v_m := ZeroMatrix(Zp, 2*g+1, 1);
    v_m[1,1] := getB(j, (2*g+1) * j);
    // v_m := Matrix([[getB(j, (2*g+1) * j)]] cat [[0] : i in [1..2*g]]);

    for m in [(i + (2*g+1)*j) + 1..1 by -1] do
        for o in [1..(2*g+1)] do
            D := getDH(m * p - o, t);
            M := getMH(m * p - o, t);
            
            v_m := (1/D) * M * v_m;
        end for;

        D := getDHrange((m-1)*p, m*p - 2*g - 2, t);
        M := getMHrange((m-1)*p, m*p - 2*g - 2, t);

        v_m := (1/D) * M * v_m;

        D := getDH((m-1)*p, t);
        M := getMH((m-1)*p, t);

        v_m := (1/D) * M * v_m;

        if m eq 1 then
            T := ZeroMatrix(Zp, 2*g, 1);
        else
            T := ZeroMatrix(Zp, 2*g+1, 1);
            T[1,1] := getB(j, m - i - 2);
        end if;
    
        // print(Parent(v_m));
        // print(Parent(T));

        v_m := T + v_m;

    end for;

    return v_m;

end function;

// print(getWij(2,2));



function getXj(j)
    if j eq 0 then
        Mj := getMVrange(0, (p-1)/2);
        Dj := getDVrange(0, (p-1)/2);
    else
        Mj := getMVrange(((2*j - 1)*p - 1)/2, ((2*j + 1)*p - 1)/2);
        Dj := getDVrange(((2*j - 1)*p - 1)/2, ((2*j + 1)*p - 1)/2);
    end if;

    return ((1/Dj) * Mj);
end function;



function getWi(i)    
    v_m := getWij(i, N-1);

    for m in [N-2..0 by -1] do
        v_m := getWij(i, m) + (getXj(m+1) * v_m);
    end for;

    w_i := getXj(0) * v_m;

    return w_i;
end function;



CharMat := ZeroMatrix(Zp, 2*g, 2*g);
for i in [0..2*g - 1] do
    Ti := getWi(i);
    for j in [1..2*g] do
        CharMat[j,i+1] := Ti[j,1];
    end for;
end for;



// A := getWi(0);
// B := getWi(1);
// // print(getWi(0));
// // print(getWi(1));
// //     for j in [0..N-1] do

// print(A);
// print(B);
// C := Matrix([[A[1,1], B[1,1]], [A[2,1], B[2,1]]]);
// print(C);

char_poly := CharacteristicPolynomial(CharMat);
print "Characteristic Polynomial:", char_poly;


// C := Matrix([[A[i], B[i]] : i in [1..Nrows(A)]]);

// C := Matrix([getWi(0)[i] cat getWi(1)[i] : i in [1..2]]);





// end function;